-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/TerenceNg03/CI-Server#readme</a>
@package server
@version 0.1.0.0

module Config

-- | Configuration for web server
data Config
Config :: !Int -> !Text -> !FilePath -> !FilePath -> !Text -> !Text -> Config

-- | port number of the server
[portNumber] :: Config -> !Int

-- | web secret for verify github push
[webSecret] :: Config -> !Text

-- | database file path
[dbFile] :: Config -> !FilePath

-- | log file path
[logFile] :: Config -> !FilePath

-- | github token ("<a>USERNAME</a> <a>TOKEN</a>")
[githubToken] :: Config -> !Text

-- | domain name and protocol used by server
--   ("<a>https://yourdomain.com")</a>
[domain] :: Config -> !Text
instance GHC.Generics.Generic Config.Config
instance Data.Aeson.Types.FromJSON.FromJSON Config.Config

module Database
migrateAll :: Migration

-- | Insert a build into the database
insertBuild :: MonadIO m => Build -> SqlPersistT m ()

-- | Get a build from the database by its unique commit hash
getBuildByUUID :: MonadIO m => Text -> SqlPersistT m (Maybe (Entity Build))

-- | Get all builds from the database
getBuilds :: MonadIO m => SqlPersistT m [Value Text]

-- | Defines the schema for <a>Build</a> entity with a unique identifier
--   and build details.
data Build
Build :: !Text -> !Text -> !Text -> !Text -> !Text -> Build
[buildUuid] :: Build -> !Text
[buildCommit] :: Build -> !Text
[buildStatus] :: Build -> !Text
[buildDate] :: Build -> !Text
[buildLog] :: Build -> !Text
instance Data.Aeson.Types.ToJSON.ToJSON Database.Build
instance GHC.Generics.Generic Database.Build
instance GHC.Show.Show Database.Build
instance Data.Aeson.Types.FromJSON.FromJSON (Database.Persist.Class.PersistEntity.Key Database.Build)
instance Data.Aeson.Types.ToJSON.ToJSON (Database.Persist.Class.PersistEntity.Key Database.Build)
instance Database.Persist.Sql.Class.PersistFieldSql (Database.Persist.Class.PersistEntity.Key Database.Build)
instance Database.Persist.Class.PersistField.PersistField (Database.Persist.Class.PersistEntity.Key Database.Build)
instance Web.Internal.HttpApiData.FromHttpApiData (Database.Persist.Class.PersistEntity.Key Database.Build)
instance Web.Internal.HttpApiData.ToHttpApiData (Database.Persist.Class.PersistEntity.Key Database.Build)
instance Web.PathPieces.PathPiece (Database.Persist.Class.PersistEntity.Key Database.Build)
instance GHC.Classes.Ord (Database.Persist.Class.PersistEntity.Key Database.Build)
instance GHC.Classes.Eq (Database.Persist.Class.PersistEntity.Key Database.Build)
instance GHC.Read.Read (Database.Persist.Class.PersistEntity.Key Database.Build)
instance GHC.Show.Show (Database.Persist.Class.PersistEntity.Key Database.Build)
instance Database.Persist.Class.PersistEntity.PersistEntity Database.Build
instance Database.Persist.Class.PersistField.PersistField Database.Build
instance Database.Persist.Sql.Class.PersistFieldSql Database.Build
instance Database.Persist.Class.PersistUnique.OnlyOneUniqueKey Database.Build
instance Database.Persist.Class.PersistUnique.AtLeastOneUniqueKey Database.Build
instance Database.Persist.Class.PersistEntity.SymbolToField "id" Database.Build (Database.Persist.Class.PersistEntity.Key Database.Build)
instance Database.Persist.Class.PersistEntity.SymbolToField "uuid" Database.Build Data.Text.Internal.Text
instance Database.Persist.Class.PersistEntity.SymbolToField "commit" Database.Build Data.Text.Internal.Text
instance Database.Persist.Class.PersistEntity.SymbolToField "status" Database.Build Data.Text.Internal.Text
instance Database.Persist.Class.PersistEntity.SymbolToField "date" Database.Build Data.Text.Internal.Text
instance Database.Persist.Class.PersistEntity.SymbolToField "log" Database.Build Data.Text.Internal.Text
instance Database.Persist.Class.PersistEntity.SafeToInsert Database.Build

module HandleLogger

-- | Print log to a handle with flushing on each write
withHandleLogger :: MonadUnliftIO m => Handle -> (Logger -> m r) -> m r

module WebHook

-- | Commit Info
data Commit
Commit :: Text -> Repo -> Commit

-- | SHA of the commit
[after] :: Commit -> Text

-- | Repository of the commit
[repository] :: Commit -> Repo

-- | Repository Info
data Repo
Repo :: Text -> Text -> Repo

-- | Url used by `git clone`
[cloneUrl] :: Repo -> Text

-- | Url to post commit status
[statusesUrl] :: Repo -> Text

-- | Run webhook jobs and post status to github
runWebHook :: HookM ()
instance GHC.Classes.Eq WebHook.Repo
instance GHC.Show.Show WebHook.Repo
instance GHC.Generics.Generic WebHook.Repo
instance GHC.Classes.Eq WebHook.Commit
instance GHC.Show.Show WebHook.Commit
instance GHC.Generics.Generic WebHook.Commit
instance GHC.Generics.Generic WebHook.State
instance GHC.Generics.Generic WebHook.Response
instance GHC.Show.Show WebHook.Response
instance Data.Aeson.Types.ToJSON.ToJSON WebHook.Response
instance Data.Aeson.Types.ToJSON.ToJSON WebHook.State
instance GHC.Show.Show WebHook.State
instance Data.Aeson.Types.ToJSON.ToJSON WebHook.Commit
instance Data.Aeson.Types.FromJSON.FromJSON WebHook.Commit
instance Data.Aeson.Types.ToJSON.ToJSON WebHook.Repo
instance Data.Aeson.Types.FromJSON.FromJSON WebHook.Repo

module Server

-- | Run web server with given config and logger
runServer :: Config -> Logger -> IO ()

-- | Calculate HMAC from secret and payload
sha :: IsString a => Text -> ByteString -> a
